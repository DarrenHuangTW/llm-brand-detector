"""
AI提供商抽象基類 - 統一所有AI提供商的介面

流程架構：
┌─────────────────────────────────────────────────────────┐
│                BaseAIProvider 基類                        │
├─────────────────────────────────────────────────────────┤
│  1. 初始化 (__init__)                                     │
│     │                                                   │
│     ├── 儲存 API 金鑰                                     │
│     └── 初始化速率限制時間戳記                               │
│                                                         │
│  2. 抽象方法 (Abstract Methods)                           │
│     │                                                   │
│     ├── provider_name() → 返回提供商名稱                   │
│     ├── get_response() → 獲取AI回應                       │
│     └── is_available() → 檢查可用性                       │
│                                                         │
│  3. 速率限制 (_rate_limit_delay)                          │
│     │                                                   │
│     ├── 計算最小請求間隔                                    │
│     ├── 檢查距離上次請求的時間                              │
│     ├── 如果間隔太短則等待                                 │
│     └── 更新最後請求時間                                   │
└─────────────────────────────────────────────────────────┘

依賴關係：
- abc.ABC: 抽象基類支援
- asyncio: 非同步延遲功能
- time: 時間計算
- logging: 日誌記錄
"""

from abc import ABC, abstractmethod
from typing import Optional
import asyncio
import time
import logging

logger = logging.getLogger(__name__)

class BaseAIProvider(ABC):
    """
    AI 提供商抽象基類
    
    作用：為所有 AI 提供商提供統一的介面和基礎功能
    - 統一 API 金鑰管理
    - 統一速率限制機制
    - 統一抽象方法定義
    """
    
    def __init__(self, api_key: str):
        """
        初始化 AI 提供商
        
        流程圖：
        ┌──────────────┐
        │  開始初始化    │
        └──────┬───────┘
               │
        ┌──────▼───────┐
        │  儲存API金鑰   │
        └──────┬───────┘
               │
        ┌──────▼───────┐
        │ 初始化時間戳記  │
        └──────┬───────┘
               │
        ┌──────▼───────┐
        │   完成初始化   │
        └──────────────┘
        
        參數：
            api_key (str): AI 提供商的 API 金鑰
        """
        self.api_key = api_key
        self.last_request_time = 0  # 用於速率限制的時間戳記
    
    @property
    @abstractmethod
    def provider_name(self) -> str:
        """
        提供商名稱屬性
        
        作用：返回 AI 提供商的識別名稱
        返回：提供商名稱字符串（如 "OpenAI", "Anthropic" 等）
        
        注意：此為抽象屬性，必須在子類中實現
        """
        pass
    
    @abstractmethod
    async def get_response(self, prompt: str) -> str:
        """
        獲取 AI 回應的抽象方法
        
        流程圖：
        ┌─────────────┐
        │  接收提示詞   │
        └─────┬───────┘
              │
        ┌─────▼───────┐
        │  呼叫AI API  │
        └─────┬───────┘
              │
        ┌─────▼───────┐
        │  處理回應     │
        └─────┬───────┘
              │
        ┌─────▼───────┐
        │  返回結果     │
        └─────────────┘
        
        參數：
            prompt (str): 發送給 AI 的提示詞
        
        返回：
            str: AI 的回應文本
        
        注意：此為抽象方法，必須在子類中實現具體的 API 調用邏輯
        """
        pass
    
    @abstractmethod
    def is_available(self) -> bool:
        """
        檢查提供商是否可用的抽象方法
        
        流程圖：
        ┌─────────────┐
        │  檢查狀態     │
        └─────┬───────┘
              │
        ┌─────▼───────┐
        │ 驗證API金鑰  │
        └─────┬───────┘
              │
        ┌─────▼───────┐
        │ 返回可用性    │
        └─────────────┘
        
        返回：
            bool: True 如果提供商可用，False 否則
        
        注意：此為抽象方法，通常檢查 API 金鑰是否存在
        """
        pass
    
    async def _rate_limit_delay(self, rpm: int = 60):
        """
        實施速率限制延遲機制
        
        流程圖：
        ┌─────────────────┐
        │    開始速率限制    │
        └─────────┬───────┘
                  │
        ┌─────────▼───────┐
        │   檢查RPM是否>0   │◄─── rpm: 每分鐘請求數限制
        └─────┬───────┬───┘
              │       │
              │ Y     │ N
              │       └─────────┐
        ┌─────▼───────┐          │
        │ 計算最小間隔時間 │          │
        │ (60秒/rpm)   │          │
        └─────┬───────┘          │
              │                  │
        ┌─────▼───────┐          │
        │ 獲取當前時間    │          │
        └─────┬───────┘          │
              │                  │
        ┌─────▼───────┐          │
        │計算距上次請求時間│          │
        └─────┬───────┘          │
              │                  │
        ┌─────▼───────┐          │
        │ 是否需要延遲？  │          │
        └─────┬───┬───┘          │
              │   │              │
              │Y  │N             │
              │   └──────┐       │
        ┌─────▼───────┐  │       │
        │ 執行異步等待   │  │       │
        │ asyncio.sleep│  │       │
        └─────┬───────┘  │       │
              │          │       │
        ┌─────▼──────────▼───────▼┐
        │    更新最後請求時間       │
        └─────────┬───────────────┘
                  │
        ┌─────────▼───────┐
        │     結束延遲      │
        └─────────────────┘
        
        參數：
            rpm (int): 每分鐘最大請求數，預設 60
        
        作用：
            - 防止 API 呼叫過於頻繁
            - 遵守各 AI 提供商的速率限制
            - 避免觸發 429 錯誤（請求過多）
        
        實現邏輯：
            1. 計算兩次請求間的最小間隔時間
            2. 檢查距離上次請求的時間
            3. 如果間隔不足，則異步等待
            4. 更新最後請求時間戳記
        """
        if rpm <= 0:
            return
            
        min_interval = 60.0 / rpm  # 計算最小間隔（秒）
        current_time = time.time()
        
        time_since_last = current_time - self.last_request_time
        if time_since_last < min_interval:
            delay = min_interval - time_since_last
            await asyncio.sleep(delay)
        
        self.last_request_time = time.time()